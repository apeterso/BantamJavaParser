/* Bantam Java Compiler and Language Toolset.

   Copyright (C) 2009 by Marc Corliss (corliss@hws.edu) and
                         David Furcy (furcyd@uwosh.edu) and
                         E Christopher Lewis (lewis@vmware.com).
   ALL RIGHTS RESERVED.

   The Bantam Java toolset is distributed under the following
   conditions:

     You may make copies of the toolset for your own use and
     modify those copies.

     All copies of the toolset must retain the author names and
     copyright notice.

     You may not sell the toolset or distribute it in
     conjunction with a commerical product or service without
     the expressed written consent of the authors.

   THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS
   OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE
   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
   PARTICULAR PURPOSE.
*/

/*
* File: parser.cup
* Authors: Modified by Devon Cormack, Pratap Luitel, Anders Peterson
* Date: 02/26/2014
*/

/* code below is copied to the file containing the parser */

package parser;

/* import the AST and utility class files */
import lexer.*;
import ast.*;
import util.ErrorHandler;
/* import Symbol class, which represents the type of token passed
   from the lexer to the parser.  Note: in the lexer package there is
   a file Token.java that  defines a subclass of Symbol called Token,
   which is what is actually passed to the parser */
import java_cup.runtime.Symbol;

/* the code below is copied to the class containing the context-free
   grammar productions */
action code {:
    /** object for error handling */
    private ErrorHandler errorHandler = new ErrorHandler();

    /* sets the error handler */
    public ErrorHandler getErrorHandler() {
	return errorHandler;
    }

    /* returns the current line number from the scanner */
    public int getCurrLineNum() {
	return ((Lexer)parser.getScanner()).getCurrLineNum();
    }

    /* returns the current file name from the scanner */
    public String getCurrFilename() {
	return ((Lexer)parser.getScanner()).getCurrFilename();
    }
:}

/* code below is copied to the Parser class, which drives parsing */
parser code {:
    /** overrides done_parsing in inherited class, called when parsing finishes
      * either after accepting or because of errors
      * */
    public void done_parsing() {
	super.done_parsing();
	// if lexing and/or parsing errors then exit
	action_obj.getErrorHandler().checkErrors();
    }

    /** overrides syntax_error in inherited class and handles syntax errors
      * @param curr current symbol from the lexer
      * */
    public void syntax_error(Symbol curr) {
	// get token value from the symbol
	Token t = (Token)curr.value;

	// get the error handler object
	ErrorHandler errorHandler = action_obj.getErrorHandler();

	// may want to modify and augment the code below for more
	// accurate error reporting
	errorHandler.register(errorHandler.PARSE_ERROR, action_obj.getCurrFilename(),
			      action_obj.getCurrLineNum(),
			      "unexpected input near '" + t.getLexeme() + "'");
    }

    /** override error_sync_size in inherited class and
      * change the minimum number of tokens to skip on an error from 3 to 2
      * @return minimum number of tokens to skip on an error
      * */
    protected int error_sync_size() {
	return 2;
    }
:}

/* list of terminals, which correspond to tokens returned by the lexer
 */
terminal Token LEX_ERROR;
terminal Token CLASS, EXTENDS, IF, ELSE, WHILE, FOR, BREAK, NEW, RETURN, INSTANCEOF;
terminal Token PLUS, MINUS, TIMES, DIVIDE, MODULUS, NOT, AND, OR;
terminal Token EQ, NE, LT, LEQ, GT, GEQ, ASSIGN, INCR, DECR;
terminal Token LPAREN, RPAREN, LBRACE, RBRACE, LSQBRACE, RSQBRACE;
terminal Token SEMI, COMMA, DOT;
terminal Token ID, INT_CONST, BOOLEAN_CONST, STRING_CONST;

/* list of non-terminals used in context-free grammar
   format: nonterminal <type> <list of nonterminal names>
   example: nonterminal Expr expr1, expr2
   The type specifies what type of result the non-terminal will return
   The type should correspond to a class name from the AST
*/
nonterminal Program program;			/*check*/
nonterminal ClassList class_list;		/*check*/
nonterminal Class_ class;				/*check*/
nonterminal MemberList member_list; 	/*check*/
nonterminal Member member;				/*check*/
nonterminal Method method;				/*check*/
nonterminal Field field;				/*check*/
nonterminal Formal formal;
nonterminal FormalList formal_list;
nonterminal Stmt stmt;
nonterminal StmtList stmt_list;
nonterminal Expr expr;
nonterminal ExprList expr_list;
nonterminal ArrayExpr arrayExpr;
nonterminal ArrayAssignExpr arrayAssignExpr;
nonterminal ExprStmt exprStmt;
nonterminal DeclStmt declStmt;
nonterminal IfStmt ifStmt;
nonterminal WhileStmt whileStmt;
nonterminal ForStmt forStmt;
nonterminal BreakStmt breakStmt;
nonterminal ReturnStmt returnStmt;
nonterminal BlockStmt blockStmt;
nonterminal AssignExpr assignExpr;
nonterminal DispatchExpr dispatchExpr;
nonterminal NewExpr newExpr;
nonterminal InstanceofExpr instanceofExpr;
nonterminal CastExpr castExpr;
nonterminal BinaryExpr binaryExpr;
nonterminal UnaryExpr unaryExpr;
nonterminal ConstExpr constExpr;
nonterminal VarExpr varExpr;	/* Remember to generate an ArrayExpr node if this is an array type. -DC 08:29 02/22/14 */
nonterminal BinaryArithExpr binaryArithExpr;
nonterminal BinaryCompExpr binaryCompExpr;
nonterminal BinaryLogicExpr binaryLogicExpr;
nonterminal UnaryNegExpr unaryNegExpr;
nonterminal UnaryNotExpr unaryNotExpr;
nonterminal UnaryIncrExpr unaryIncrExpr;
nonterminal UnaryDecrExpr unaryDecrExpr;
/* add other non-terminals... */ /* All should be there now - DC 08:27 02/22/14 */

/* precedence/associativity rules
   format: precedence <associativity> <list of terminals>
   example: precedence right ASSIGN
   precedence specified by order (from lowest to highest)
   note: use a single precedence rule for terminals with same precedence
   associativity specfied by middle operand (left, right, none)
*/
/* add precedence rules... */
/* The classes for the non-terminals are defined in their
 * own Java files in the /src/ast/ directory. Look at them
 * for the parameters to pass to each of the objects of the
 * AST when you create it. */

/* program, which is simply a list of classes */
program
	 ::= class_list:cl
	    {: RESULT = new Program(0, cl); :}
        ;

/* list of classes (must be at least one class in program) */
class_list
	/* single class */
        ::= class:c
            {: RESULT = (ClassList)(new ClassList(0)).addElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = (ClassList)cl.addElement(c); :}
	;

/* a single class */
class
        ::=
        /* class with no specified parent - uses Object class */
        CLASS:t ID:name LBRACE member_list:ml RBRACE
	    {: RESULT = new Class_(t.getLineNum(), getCurrFilename(),
				   name.getAttribute(), "Object", ml); :}
        /* class with a specified parent */
	| CLASS:t ID:name EXTENDS ID:parent LBRACE member_list:ml RBRACE
	    {: RESULT = new Class_(t.getLineNum(), getCurrFilename(),
				   name.getAttribute(),
				   parent.getAttribute(), ml); :}
	;

/* member list (FIXE: only allows empty member lists) */
member_list
	::=
        /* empty list */
	    {: RESULT = new MemberList(getCurrLineNum()); :}
	;

/* a single member -DC */
member
	::=
		method:m
		{:	RESULT = (Method)m ; :}
	|	field:f
		{: RESULT = (Field)f; :}
	;

/* a single method */
method
	::=
		ID:returnType ID:name LPAREN formal_list:formalList RPAREN LBRACE stmt_list:stmtList RBRACE
		{: RESULT = new Method(getCurrLineNum(), returnType.getAttribute(), name.getAttribute(), formalList, stmtList); :}
	;

/* a single field */
field
	::=
		ID:type ID:name
		{: RESULT = new Field(getCurrLineNum(), type.getAttribute(), name.getAttribute(), null); :}
	|	ID:type LBRACE RBRACE ID:name
		{: RESULT = new Field(getCurrLineNum(), type.getAttribute(), name.getAttribute(), e); :}
	|	ID:type ID:name ASSIGN expr:e
    	{: RESULT = new Field(getCurrLineNum(), type.getAttribute(), name.getAttribute(), null); :}
    |	ID:type LBRACE RBRACE ID:name EQ expr:e ASSIGN expr:e
    	{: RESULT = new Field(getCurrLineNum(), type.getAttribute(), name.getAttribute(), e); :}
	;

/* formal list */
formal_list
	/*single formal*/
	::= ID:type ID:name
		{: RESULT = new Formal(getCurrLineNum(), type.getAttribute(), name.getAttribute()); :}
	/*multiple formal*/
	|	ID:type LBRACE RBRACE ID:name
		{: RESULT = new Field(getCurrLineNum(), type.getAttribute(), name.getAttribute(), e); :}
	;

/*statement list*/

 stmt_list
 	/* single statement */
         ::= stmt:s
             {: RESULT = (StmtList)new StmtList(getCurrLineNum()).addElement(s); :}
 	/* multiple statements */
 	| stmt_list:sl stmt:s
 	    {: RESULT = (StmtList)sl.addElement(s); :}
 	;

/* a single statement*/
  stmt
    /*expression statement*/
    ::= exprStmt:exprS
        {: RESULT = (ExprStmt)exprS; :}
    /* declaration statement */
    |  declStmt :declS
        {: RESULT = (DeclStmt)declS; :}
    /*if statement*/
    |  ifStmt :ifS
            {: RESULT = (IfStmt)ifS; :}
    /*while statement*/
    |  whileStmt :whileS
            {: RESULT = (WhileStmt)whileS; :}
    /*for statement*/
    |  forStmt :forS
            {: RESULT = (ForStmt)forS; :}
    /*break statement*/
    |  breakStmt :breakS
            {: RESULT = (BreakStmt)breakS; :}
    /*return statement*/
    |  returnStmt :returnS
            {: RESULT = (ReturnStmt)returnS; :}
    /*block statement*/
    |  blockStmt :blockS
            {: RESULT = (BlockStmt)blockS; :}
    ;
/* Expression Statement */
exprStmt
	::= expr:e
	    {: RESULT = (Expr)e; :}
        ;

/* Declaration Statement */
declStmt
    /*without the optional [] braces*/
	::= ID:type ID:name ASSIGN expr:e
	  {: RESULT = new DeclStmt(getCurrLineNum(), type.getAttribute(), name.getAttribute(), e); :}
	/*with the optional [] braces*/
	| ID:type LBRACE RBRACE ID:name ASSIGN expr:e
	  {: RESULT = new DeclStmt(getCurrLineNum(), type.getAttribute(), name.getAttribute(), e); :}
    ;

/* if statement*/
ifStmt
    /*only if clause*/
    ::= IF LPAREN expr:e RPAREN stmt:s1
     {: RESULT = new IfStmt(getCurrLineNum(), e,s1, null); :}
    /*if then else clause*/
     | IF LPAREN expr:e RPAREN stmt:s1 ELSE stmt:s2
     {: RESULT = new IfStmt(getCurrLineNum(), e,s1,s2); :}
     ;

/*while statement*/
whileStmt
     ::= WHILE LPAREN expr:e RPAREN stmt:s
     {: RESULT = new WhileStmt(getCurrLineNum(),e,s); :}
     ;

/*for statement*/
forStmt
    ::= FOR SEMI SEMI stmt:body
        {: RESULT = new ForStmt(getCurrLineNum(), null,null,null,body); :}
    |     FOR expr:einit SEMI SEMI stmt:body
        {: RESULT = new ForStmt(getCurrLineNum(), einit, null, null, body); :}
    |    FOR SEMI expr:epred SEMI stmt:body
        {: RESULT = new ForStmt(getCurrLineNum(), null, epred, null, body); :}
    |    FOR SEMI SEMI expr:eup stmt:body
        {: RESULT = new ForStmt(getCurrLineNum(), null, null, eup, body); :}
    |    FOR SEMI expr:epred SEMI expr:eup stmt:body
        {: RESULT = new ForStmt(getCurrLineNum(), null, epred, eup, body); :}
    |    FOR expr:einit SEMI SEMI expr:eup stmt:body
        {: RESULT = new ForStmt(getCurrLineNum(), einit, null, eup, body); :}
    |    FOR expr:einit SEMI expr:epred SEMI stmt:body
        {: RESULT = new ForStmt(getCurrLineNum(), einit, epred, null, body); :}
    |    FOR expr:einit SEMI expr:epred SEMI expr:eup stmt:body
        {: RESULT = new ForStmt(getCurrLineNum(), einit, epred, eup, body); :}
    ;

/*break statement*/
breakStmt
    ::= BREAK
    {: RESULT = new BreakStmt(getCurrLineNum()); :}
    ;

/*return statement*/
returnStmt
    /*only return without expression*/
    ::= RETURN
        {: RESULT = new ReturnStmt(getCurrLineNum(), null); :}
    /*return an expression*/
    | RETURN expr:e
        {: RESULT = new ReturnStmt(getCurrLineNum(),e); :}
    ;

/*block statement*/
blockStmt
    ::=LSQBRACE stmt_list:sl RSQBRACE
       {: RESULT = new BlockStmt(getCurrLineNum(),sl); :}
    ;
/*expression*/
expr
    /*assingment expression*/
    ::=assignExpr:assignE
        {: RESULT = (AssignExpr)assignE; :}
    /*dispatch expression*/
    |dispatchExpr:dispatchE
        {: RESULT = (DispatchExpr)dispatchE; :}
    /*new expression*/
    |newExpr:newE
        {: RESULT = (NewExpr)newE; :}
    /*isntanceof expression*/
    |instanceofExpr:instanceofE
        {: RESULT = (InstanceofExpr)instanceofE; :}
    /*cast expression*/
    |castExpr:castE
        {: RESULT = (CastExpr)castE; :}
    /*binary expression*/
    |binaryExpr:binaryE
        {: RESULT = (BinaryExpr)binaryE; :}
    /*unary expression*/
    |unaryExpr:unaryE
        {: RESULT = (UnaryExpr)unaryE; :}
    /*const expression*/
    |constExpr:constE
        {: RESULT = (ConstExpr)constE; :}
    /*var expression*/                                                    /*arrayExpr node?? */
    |varExpr:varE
        {: RESULT = (VarExpr)varE; :}
    /*parenthesis expression*/
    |LPAREN expr:e RPAREN
        {: RESULT = (Expr)e; :}
    ;

/*assignment expression*/
assignExpr
    ::= varExpr:varE ASSIGN expr:e
    {:RESULT = new AssignExpr(getCurrLineNum(), null, varE.getName(), e); :}       /*AssignExpr() needs different set of arguments*/
    ;

/*dispatch expression*/                                              /*DispatchExpr object needs different set of arguments without the optional expr*/
dispatchExpr
    /*without the optional [Expr.]*/
    ::= ID: methodName LPAREN expr_list:el RPAREN
        {:RESULT = new DispatchExpr(getCurrLineNum(),null, methodName.getAttribute(),el); :}
    /*with the optional [Expr .]*/
    | expr:e DOT ID: methodName LPAREN expr_list:el RPAREN
        {:RESULT = new DispatchExpr(getCurrLineNum(),e,methodName.getAttribute(),el); :}
    ;

/*new expression*/
newExpr
    ::= NEW ID:type LPAREN RPAREN
        {:RESULT = new NewExpr(getCurrLineNum(),type.getAttribute()); :}
    | NEW ID:type LBRACE expr:e RBRACE
        {:RESULT = new NewExpr(getCurrLineNum(),type.getAttribute()); :}
    ;

/*instanceof expression*/
instanceofExpr
    /*without the optional braces []*/
    ::=expr:e INSTANCEOF ID:type
        {:RESULT = new InstanceofExpr(getCurrLineNum(),e,type.getAttribute()); :}
    /*with the optional [] */
    | expr:e INSTANCEOF ID:type LBRACE RBRACE
        {:RESULT = new InstanceofExpr(getCurrLineNum(),e,type.getAttribute()); :}
    ;
/*cast expression*/
castExpr
    /*without the optional braces [] */
    ::= LPAREN ID:type RPAREN LPAREN expr:e RPAREN
        {:RESULT = new CastExpr(getCurrLineNum(),type.getAttribute(),e); :}
    /* with the optional braces [] */
    | LPAREN ID:type LBRACE RBRACE RPAREN LPAREN expr:e RPAREN
        {:RESULT = new CastExpr(getCurrLineNum(),type.getAttribute(),e); :}
    ;

/*binary expression*/
binaryExpr                                                 /*argument does not match for constructing BinaryExpr object*/
    /*binary arithmetic expression*/
    ::= binaryArithExpr:bArithExpr
        {:RESULT = (BinaryArithExpr)bArithExpr; :}
    /*binary comp expression*/
    | binaryCompExpr: bCompExpr
        {:RESULT = (BinaryCompExpr)bCompExpr; :}
    /*binary logic expression*/
    | binaryLogicExpr:bLogicExpr
        {:RESULT = (BinaryLogicExpr)bLogicExpr; :}
    ;

/*unary expression*/
unaryExpr
    /*unary neg expression*/
    ::= unaryNegExpr:uNegExpr
        {:RESULT = (UnaryNegExpr)uNegExpr; :}
    /*unary not expression*/
    | unaryNotExpr: uNotExpr
        {:RESULT = (UnaryNotExpr)uNotExpr; :}
    /*unary incr expression*/
    | unaryIncrExpr:uIncrExpr
        {:RESULT = (UnaryIncrExpr)uIncrExpr; :}
    /*unary decr expression*/
    | unaryDecrExpr:uDecrExpr
        {:RESULT = (UnaryDecrExpr)uDecrExpr; :}
    ;
/*const expression*/
constExpr
    /*int const*/
    ::= INT_CONST:int_const
        {:RESULT = (ConstExpr)(new ConstIntExpr(getCurrLineNum(), int_const.getAttribute())); :}
    /*boolean const*/
    | BOOLEAN_CONST:bool_const
        {:RESULT = (ConstExpr)(new ConstBooleanExpr(getCurrLineNum(), bool_const.getAttribute())); :}
    /*string const*/
    |STRING_CONST:string_const
        {:RESULT = (ConstExpr)(new ConstStringExpr(getCurrLineNum(), string_const.getAttribute())); :}
    ;

/*binary arith expression*/
binaryArithExpr
    /*leftExpr + rightExpr*/
    ::= expr:leftExpr PLUS expr:rightExpr
        {:RESULT = new BinaryArithPlusExpr(getCurrLineNum(),leftExpr,rightExpr); :}
    /*leftExpr - rightExpr*/
    | expr:leftExpr MINUS expr:rightExpr
        {:RESULT = new BinaryArithMinusExpr(getCurrLineNum(),leftExpr,rightExpr); :}
    /*leftExpr / rightExpr*/
    | expr:leftExpr DIVIDE expr:rightExpr
        {:RESULT = new BinaryArithDivideExpr(getCurrLineNum(),leftExpr,rightExpr); :}
    /*leftExpr * rightExpr*/
    | expr:leftExpr TIMES expr:rightExpr
        {:RESULT = new BinaryArithTimesExpr(getCurrLineNum(),leftExpr,rightExpr); :}
    /*leftExpr % rightExpr*/
    | expr:leftExpr MODULUS expr:rightExpr
        {:RESULT = new BinaryArithModulusExpr(getCurrLineNum(),leftExpr,rightExpr); :}
    ;

/*binary comp expression*/
binaryCompExpr
    /*leftExpr == rightExpr*/
    ::= expr:leftExpr EQ expr:rightExpr
        {:RESULT = new BinaryCompEqExpr(getCurrLineNum(),leftExpr,rightExpr); :}
    /*leftExpr != rightExpr*/
    | expr:leftExpr NE expr:rightExpr
        {:RESULT = new BinaryCompNeExpr(getCurrLineNum(),leftExpr,rightExpr); :}
    /*leftExpr < rightExpr*/
    | expr:leftExpr LT expr:rightExpr
        {:RESULT = new BinaryCompLtExpr(getCurrLineNum(),leftExpr,rightExpr); :}
    /*leftExpr <= rightExpr*/
    | expr:leftExpr LEQ expr:rightExpr
        {:RESULT = new BinaryCompLeqExpr(getCurrLineNum(),leftExpr,rightExpr); :}
    /*leftExpr > rightExpr*/
    | expr:leftExpr GT expr:rightExpr
        {:RESULT = new BinaryCompGtExpr(getCurrLineNum(),leftExpr,rightExpr); :}
    /*leftExpr >= rightExpr*/
    | expr:leftExpr GEQ expr:rightExpr
        {:RESULT = new BinaryCompGeqExpr(getCurrLineNum(),leftExpr,rightExpr); :}
    ;

/*binary logic expression*/
binaryLogicExpr
    /*leftExpr && rightExpr*/
    ::= expr:leftExpr AND expr:rightExpr
        {:RESULT =(BinaryLogicExpr) new BinaryLogicAndExpr(getCurrLineNum(),leftExpr,rightExpr); :}
    /*leftExpr || rightExpr*/
    | expr:leftExpr OR expr:rightExpr
        {:RESULT = (BinaryLogicExpr )new BinaryLogicOrExpr(getCurrLineNum(),leftExpr,rightExpr); :}
    ;

/*unary neg expression*/
unaryNegExpr
    ::= MINUS expr:e
     {:RESULT = new UnaryNegExpr(getCurrLineNum(),e); :}
    ;

/*unary not expression*/
unaryNotExpr
    ::= NOT expr:e
     {:RESULT = new UnaryNotExpr(getCurrLineNum(),e); :}
    ;

/*unary incr expression*/
unaryIncrExpr
    /*operator is prefix*/
    ::= INCR expr:e
     {:RESULT = new UnaryIncrExpr(getCurrLineNum(),e,false); :}
    /*operator is postfix*/
    | expr:e INCR
     {:RESULT = new UnaryIncrExpr(getCurrLineNum(),e,true); :}
    ;


/*unary decr expression*/
unaryDecrExpr
    /*operator is prefix*/
    ::= DECR expr:e
     {:RESULT = new UnaryDecrExpr(getCurrLineNum(),e,false); :}
    /*operator is postfix*/
    | expr:e DECR
     {:RESULT = new UnaryDecrExpr(getCurrLineNum(),e,true); :}
    ;

/*var expr*/
varExpr
    /*without the optional elements */
    ::=ID:name
       {:RESULT = new VarExpr(getCurrLineNum(),null, name.getAttribute()); :}
    /* with the first optional element before the identifier*/
    | ID:ref DOT ID:name
       {:RESULT = new VarExpr(getCurrLineNum(),new VarExpr(getCurrLineNum(), null, name.getAttribute()), name.getAttribute()); :}
    /*with the last optional element after the identifier*/
    | ID:name LBRACE expr:e RBRACE
       {:RESULT = new VarExpr(getCurrLineNum(),e, name.getAttribute()); :}
    /*with all possible options of []*/
    |ID:ref DOT ID:name LBRACE expr:e RBRACE
       {:RESULT = new VarExpr(getCurrLineNum(),new VarExpr(getCurrLineNum(), null, name.getAttribute()), name.getAttribute()); :}
     ;

/* add more productions... */








